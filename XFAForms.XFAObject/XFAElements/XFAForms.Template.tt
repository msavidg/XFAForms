<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System.Collections.Generic;

namespace XFAForms.XFAObject.XFAElements
{

<#
	//https://msdn.microsoft.com/en-us/library/dd820614.aspx

	StringBuilder sb = new StringBuilder();

    XDocument xDocument = XDocument.Load(@"c:\users\msavidg\Google Drive\Adobe Specs\Schemas\xfa_3.3\template.rng");
    XNamespace rng = "http://relaxng.org/ns/structure/1.0";

    foreach (XElement xElement in xDocument.Descendants(rng + "define").Where(e => e.Descendants(rng + "element").Any()))
    {
        var element = xElement.Element(rng + "element");
        if (element != null)
        {
			
			sb.Length = 0;

            foreach (var comment in element.DescendantNodes().Where(x => x.NodeType == XmlNodeType.Comment))
            {
				sb.Append(comment.ToString());
            }
        }

		var className = char.ToUpper(xElement.Attribute("name").Value[0]) + xElement.Attribute("name").Value.Substring(1);
#>
	public sealed class <#= className #> : XFABaseElement
	{

		//<#=  sb #>

        private string _name = "<#= className #>";
        private Dictionary<string, IXFAProperty> _properties = new Dictionary<string, IXFAProperty>();
        private EnumXFAElementType _type = EnumXFAElementType.Content;

        public new string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public new Dictionary<string, IXFAProperty> Properties
        {
            get { return _properties; }
            set { _properties = value; }
        }

        public new EnumXFAElementType Type
        {
            get { return _type; }
            set { _type = value; }
        }

		public <#=  className #>()
		{
            this._properties.Add("circular",
                new XFAProperty()
                {
                    Name = "circular",
                    Type = EnumXFAPropertyType.Property,
                    Values = new List<IXFAPropertyValue>()
                    {
                        new XFAPropertyValue() { IsDefault = true, Type = EnumXFAPropertyValueType.Numeric, Value = "0" },
                        new XFAPropertyValue() { IsDefault = false, Type = EnumXFAPropertyValueType.Numeric, Value = "1" }
                    }
                }
            );
		}

	}

<#
    }
#>
}